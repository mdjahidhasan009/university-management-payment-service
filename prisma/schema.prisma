generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CourseToPrerequisite {
  courseId                                             String
  preRequisiteId                                       String
  courses_CourseToPrerequisite_courseIdTocourses       courses @relation("CourseToPrerequisite_courseIdTocourses", fields: [courseId], references: [id])
  courses_CourseToPrerequisite_preRequisiteIdTocourses courses @relation("CourseToPrerequisite_preRequisiteIdTocourses", fields: [preRequisiteId], references: [id])

  @@id([courseId, preRequisiteId])
}

model academic_departments {
  id                String            @id
  title             String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  academicFacultyId String
  academic_faculty  academic_faculty  @relation(fields: [academicFacultyId], references: [id])
  faculties         faculties[]
  offered_courses   offered_courses[]
  students          students[]
}

model academic_faculty {
  id                   String                 @id
  title                String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  academic_departments academic_departments[]
  faculties            faculties[]
  students             students[]
}

model academic_semesters {
  id                            String                          @id
  title                         String
  code                          String
  startMonth                    String
  endMonth                      String
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime
  year                          Int
  isCurrent                     Boolean?                        @default(false)
  semester_registrations        semester_registrations[]
  student_enrolled_course_marks student_enrolled_course_marks[]
  student_enrolled_courses      student_enrolled_courses[]
  student_semester_payments     student_semester_payments[]
  students                      students[]
}

model buildings {
  id        String   @id
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime
  rooms     rooms[]
}

model course_faculties {
  courseId  String
  facultyId String
  courses   courses   @relation(fields: [courseId], references: [id])
  faculties faculties @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
}

model courses {
  id                                                                String                     @id
  title                                                             String
  code                                                              String
  credits                                                           Int                        @default(0)
  createdAt                                                         DateTime                   @default(now())
  updatedAt                                                         DateTime
  CourseToPrerequisite_CourseToPrerequisite_courseIdTocourses       CourseToPrerequisite[]     @relation("CourseToPrerequisite_courseIdTocourses")
  CourseToPrerequisite_CourseToPrerequisite_preRequisiteIdTocourses CourseToPrerequisite[]     @relation("CourseToPrerequisite_preRequisiteIdTocourses")
  course_faculties                                                  course_faculties[]
  offered_courses                                                   offered_courses[]
  student_enrolled_courses                                          student_enrolled_courses[]
}

model faculties {
  id                             String                           @id
  facultyId                      String
  firstName                      String
  lastName                       String
  middleName                     String
  profileImage                   String
  email                          String
  contactNo                      String
  gender                         String
  bloodGroup                     String
  designation                    String
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime
  academicDepartmentId           String
  academicFacultyId              String
  course_faculties               course_faculties[]
  academic_departments           academic_departments             @relation(fields: [academicDepartmentId], references: [id])
  academic_faculty               academic_faculty                 @relation(fields: [academicFacultyId], references: [id])
  offered_course_class_schedules offered_course_class_schedules[]
}

model offered_course_class_schedules {
  id                      String                  @id
  startTime               String
  endTime                 String
  dayOfWeek               WeekDays                @default(SATURDAY)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime
  offeredCourseSectionId  String
  semesterRegistrationId  String
  roomId                  String
  facultyId               String
  faculties               faculties               @relation(fields: [facultyId], references: [id])
  offered_course_sections offered_course_sections @relation(fields: [offeredCourseSectionId], references: [id])
  rooms                   rooms                   @relation(fields: [roomId], references: [id])
  semester_registrations  semester_registrations  @relation(fields: [semesterRegistrationId], references: [id])
}

model offered_course_sections {
  id                                    String                                  @id
  title                                 String
  maxCapacity                           Int
  currentlyEnrolledStudent              Int                                     @default(0)
  createdAt                             DateTime                                @default(now())
  updatedAt                             DateTime
  offeredCourseId                       String
  semesterRegistrationId                String
  offered_course_class_schedules        offered_course_class_schedules[]
  offered_courses                       offered_courses                         @relation(fields: [offeredCourseId], references: [id])
  semester_registrations                semester_registrations                  @relation(fields: [semesterRegistrationId], references: [id])
  student_semester_registration_courses student_semester_registration_courses[]
}

model offered_courses {
  id                                    String                                  @id
  createdAt                             DateTime                                @default(now())
  updatedAt                             DateTime
  courseId                              String
  academicDepartmentId                  String
  semesterRegistrationId                String
  offered_course_sections               offered_course_sections[]
  academic_departments                  academic_departments                    @relation(fields: [academicDepartmentId], references: [id])
  courses                               courses                                 @relation(fields: [courseId], references: [id])
  semester_registrations                semester_registrations                  @relation(fields: [semesterRegistrationId], references: [id])
  student_semester_registration_courses student_semester_registration_courses[]
}

model rooms {
  id                             String                           @id
  roomNumber                     String
  floor                          String
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime
  buildingId                     String
  offered_course_class_schedules offered_course_class_schedules[]
  buildings                      buildings                        @relation(fields: [buildingId], references: [id])
}

model semester_registrations {
  id                                    String                                  @id
  startDate                             DateTime
  endDate                               DateTime
  status                                SemesterRegistrationStatus?             @default(UPCOMING)
  minCredit                             Int                                     @default(0)
  maxCredit                             Int                                     @default(0)
  createdAt                             DateTime                                @default(now())
  updatedAt                             DateTime
  academicSemesterId                    String
  offered_course_class_schedules        offered_course_class_schedules[]
  offered_course_sections               offered_course_sections[]
  offered_courses                       offered_courses[]
  academic_semesters                    academic_semesters                      @relation(fields: [academicSemesterId], references: [id])
  student_semester_registration_courses student_semester_registration_courses[]
  student_semester_registrations        student_semester_registrations[]
}

model student_academic_infos {
  id                   String   @id
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  studentId            String
  totalCompletedCredit Int?     @default(0)
  cgpa                 Float?   @default(0)
  students             students @relation(fields: [studentId], references: [id])
}

model student_enrolled_course_marks {
  id                       String                   @id
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime
  studentId                String
  studentEnrolledCourseId  String
  academicSemesterId       String
  grade                    String?
  marks                    Int?
  examType                 ExamType?                @default(MIDTERM)
  academic_semesters       academic_semesters       @relation(fields: [academicSemesterId], references: [id])
  student_enrolled_courses student_enrolled_courses @relation(fields: [studentEnrolledCourseId], references: [id])
  students                 students                 @relation(fields: [studentId], references: [id])
}

model student_enrolled_courses {
  id                            String                          @id
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime
  studentId                     String
  courseId                      String
  academicSemesterId            String
  grade                         String?
  point                         Float?                          @default(0)
  totalMarks                    Int?                            @default(0)
  status                        StudentEnrolledCourseStatus?    @default(ONGOING)
  student_enrolled_course_marks student_enrolled_course_marks[]
  academic_semesters            academic_semesters              @relation(fields: [academicSemesterId], references: [id])
  courses                       courses                         @relation(fields: [courseId], references: [id])
  students                      students                        @relation(fields: [studentId], references: [id])
}

model student_semester_payment_histories {
  id                        String                    @id
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime
  studentSemesterPaymentId  String
  transactionId             String
  dueAmount                 Int                       @default(0)
  paidAmount                Int                       @default(0)
  paymentMethod             PaymentMethod?            @default(ONLINE)
  isPaid                    Boolean?                  @default(false)
  student_semester_payments student_semester_payments @relation(fields: [studentSemesterPaymentId], references: [id])
}

model student_semester_payments {
  id                                 String                               @id
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime
  studentId                          String
  academicSemesterId                 String
  fullPaymentAmount                  Int?                                 @default(0)
  partialPaymentAmount               Int?                                 @default(0)
  totalDueAmount                     Int?                                 @default(0)
  totalPaidAmount                    Int?                                 @default(0)
  paymentStatus                      PaymentStatus?                       @default(PENDING)
  student_semester_payment_histories student_semester_payment_histories[]
  academic_semesters                 academic_semesters                   @relation(fields: [academicSemesterId], references: [id])
  students                           students                             @relation(fields: [studentId], references: [id])
}

model student_semester_registration_courses {
  semesterRegistrationId  String
  studentId               String
  offeredCourseId         String
  offeredCourseSectionId  String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime
  offered_courses         offered_courses         @relation(fields: [offeredCourseId], references: [id])
  offered_course_sections offered_course_sections @relation(fields: [offeredCourseSectionId], references: [id])
  semester_registrations  semester_registrations  @relation(fields: [semesterRegistrationId], references: [id])
  students                students                @relation(fields: [studentId], references: [id])

  @@id([semesterRegistrationId, studentId, offeredCourseId])
}

model student_semester_registrations {
  id                     String                 @id
  isConfirmed            Boolean?               @default(false)
  totalCreditsTaken      Int?                   @default(0)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime
  studentId              String
  semesterRegistrationId String
  semester_registrations semester_registrations @relation(fields: [semesterRegistrationId], references: [id])
  students               students               @relation(fields: [studentId], references: [id])
}

model students {
  id                                    String                                  @id
  studentId                             String
  firstName                             String
  lastName                              String
  middleName                            String
  profileImage                          String?
  email                                 String
  contactNo                             String
  gender                                String
  bloodGroup                            String
  createdAt                             DateTime                                @default(now())
  updatedAt                             DateTime
  academicSemesterId                    String
  academicDepartmentId                  String
  academicFacultyId                     String
  student_academic_infos                student_academic_infos[]
  student_enrolled_course_marks         student_enrolled_course_marks[]
  student_enrolled_courses              student_enrolled_courses[]
  student_semester_payments             student_semester_payments[]
  student_semester_registration_courses student_semester_registration_courses[]
  student_semester_registrations        student_semester_registrations[]
  academic_departments                  academic_departments                    @relation(fields: [academicDepartmentId], references: [id])
  academic_faculty                      academic_faculty                        @relation(fields: [academicFacultyId], references: [id])
  academic_semesters                    academic_semesters                      @relation(fields: [academicSemesterId], references: [id])
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}

enum ExamType {
  MIDTERM
  FINAL
}

enum PaymentMethod {
  ONLINE
  CASH
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
